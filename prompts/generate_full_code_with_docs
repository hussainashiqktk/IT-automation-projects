Crafting an effective AI prompt to generate detailed IT support automation ideas, including full code and documentation, requires clarity, specificity, and structure. Below is a well-designed prompt you could use with an AI like me (or another advanced model) to get comprehensive results. This prompt assumes the AI can handle code generation and detailed output.

---

### Prompt:
"I want you to act as an expert IT automation developer and provide me with 50 practical, real-world IT support automation ideas that can be used in a professional IT environment. For each idea, include the following:

1. **Description**: A brief explanation of what the automation does and its real-life use case in IT support (2-3 sentences).
2. **Tool/Technology**: Specify the primary tools, languages, or platforms used (e.g., Python, PowerShell, Bash, APIs, etc.).
3. **Full Code**: Provide complete, functional code to implement the automation (e.g., a script or snippet that could be run with minimal setup). Include comments in the code for clarity.
4. **Documentation**: A concise user guide (3-5 sentences) explaining how to set up, run, and troubleshoot the script, including any prerequisites (e.g., dependencies, permissions).
5. **Potential Impact**: One sentence on how this automation saves time, reduces errors, or improves efficiency in an IT context.

The ideas should cover a wide range of IT support tasks, such as user management, system monitoring, security, backups, network administration, and helpdesk efficiency. Ensure the code is practical, tested (or logically sound), and suitable for environments like Windows, Linux, or cloud systems. Avoid vague or overly complex ideas—focus on actionable solutions that could be featured on a CV to demonstrate IT automation skills. After generating the list, summarize the top 5 ideas you think are most impactful and explain why."

---

### Why This Prompt Works:
- **Specificity**: It defines exactly what’s needed (description, tools, code, docs, impact) and sets boundaries (50 ideas, practical use cases).
- **Structure**: The numbered requirements ensure organized, consistent output.
- **Scope**: It covers diverse IT support areas and specifies tools, making the output relevant and varied.
- **Practicality**: It emphasizes real-world applicability and CV-worthiness, keeping the focus on usable skills.
- **Evaluation**: The summary of top 5 ideas encourages critical thinking and prioritization.

### Example Usage:
You could tweak this prompt further based on your needs—e.g., specify a language like "Use Python for all scripts" or a platform like "Focus on Windows Server environments." If you want me to run this prompt and generate a sample idea with code and documentation, just let me know—I’d be happy to provide a taste of what it could produce!